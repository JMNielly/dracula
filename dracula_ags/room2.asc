// room script file
String familyNamesPerDrawerNb[];
Set* possibleClientNames;


bool highjackParseCommand(String cmd)
{
  bool sendBackToNormalParsing = true;
  //insert highjacking formulas here (and set the bool to false)
  return sendBackToNormalParsing;
}

bool highjackIndexElementVerb(int index, elementType eT, String verb)
{
  bool sendBackToNormalParsing = true;
  if(eT == roomObjects && index == 49 && verb == "take")//take notebook
  {
    Display(getNoteDescription("How to use"));
    btnNoteBook.Visible = true;
  }
  return sendBackToNormalParsing;
}

bool highjackFailedInteract(String cmd)
{
  bool sendBackToNormalParsing = true;
  if(cmd.IndexOf("look") > -1 && (cmd.IndexOf("drawer") > -1 || cmd.IndexOf("file") > -1))
  {
    player.Think("The file cabinets are numbered, I need to specify which drawer number I want to interact with");
    sendBackToNormalParsing = false;
  }
  return sendBackToNormalParsing;
}

function highjackAfterInteract(int index, elementType eT, String verb)
{
  
}

function on_call(int index)
{
  String indexElementVerbHandled[];
  String cmd;
  int elementIndex;
  elementType eT;
  String verb;
  bool handled = false;
  
  switch(index)
  {
    case 1://highjack or interact
      indexElementVerbHandled = new String[3];
      cmd = tbParser.Text;
      close_gui(gParser);
      
      if(highjackParseCommand(cmd)) 
      {
        indexElementVerbHandled = roomSpecificParse(cmd);
        elementIndex = indexElementVerbHandled[0].AsInt;
        eT = stringToET(indexElementVerbHandled[1]);
        verb = indexElementVerbHandled[2];
        //debugDisplay(String.Format("Element type: %s[Index: %d[Verb: %s", etToString(eT), elementIndex, verb));
        
        if(highjackIndexElementVerb(elementIndex, eT, verb))
        {
          if(verb != "Skip")
          {
            if(verb != "Null") 
            {
              handled = interact(indexElementVerbHandled);
            }
          } else {
            handled = true;
          }
          
          if(handled) {
            highjackAfterInteract(elementIndex, eT, verb);
          } else {
            if(highjackFailedInteract(cmd))
            {
              player.Think("Hmmm... I do not quite get what the goal is, here");
            }
          }
        }
        break;
      }
  }
}

String addFirstNameInitial (String lastName)
{
  return String.Format("%s, %c.", lastName, Random(25) + 65);
}

function assignDrawers()
{
  Set* drawerPossibleNames = Set.Create();
  drawerPossibleNames.Add("Allen");
  drawerPossibleNames.Add("Baker");
  drawerPossibleNames.Add("Bennett");
  drawerPossibleNames.Add("Brown");
  drawerPossibleNames.Add("Carter");
  drawerPossibleNames.Add("Clark");
  drawerPossibleNames.Add("Clarke");
  drawerPossibleNames.Add("Cook");
  drawerPossibleNames.Add("Cooper");
  drawerPossibleNames.Add("Davies");
  drawerPossibleNames.Add("Davis");
  drawerPossibleNames.Add("Edwards");
  drawerPossibleNames.Add("Evans");
  drawerPossibleNames.Add("Green");
  drawerPossibleNames.Add("Griffiths");
  drawerPossibleNames.Add("Hall");
  drawerPossibleNames.Add("Harris");
  drawerPossibleNames.Add("Harrison");
  drawerPossibleNames.Add("Hill");
  drawerPossibleNames.Add("Hughes");
  drawerPossibleNames.Add("Jackson");
  drawerPossibleNames.Add("James");
  drawerPossibleNames.Add("Johnson");
  drawerPossibleNames.Add("Jones");
  drawerPossibleNames.Add("King");
  drawerPossibleNames.Add("Lee");
  drawerPossibleNames.Add("Lewis");
  drawerPossibleNames.Add("Martin");
  drawerPossibleNames.Add("Moore");
  drawerPossibleNames.Add("Morgan");
  drawerPossibleNames.Add("Morris");
  drawerPossibleNames.Add("Parker");
  drawerPossibleNames.Add("Phillips");
  drawerPossibleNames.Add("Price");
  drawerPossibleNames.Add("Roberts");
  drawerPossibleNames.Add("Robinson");
  drawerPossibleNames.Add("Shaw");
  drawerPossibleNames.Add("Smith");
  drawerPossibleNames.Add("Taylor");
  drawerPossibleNames.Add("Thomas");
  drawerPossibleNames.Add("Thompson");
  drawerPossibleNames.Add("Turner");
  drawerPossibleNames.Add("Walker");
  drawerPossibleNames.Add("Ward");
  drawerPossibleNames.Add("Watson");
  drawerPossibleNames.Add("White");
  drawerPossibleNames.Add("Williams");
  drawerPossibleNames.Add("Wilson");
  drawerPossibleNames.Add("Wood");
  drawerPossibleNames.Add("Wright");
  
  int i;
  int y;
  
  Set* drawerFamilyNames = Set.Create(eSorted);
  String drawerNameDrawFrom[];
  String drawnString;
  for(i = 0 ; i < 36 ; i++)
  {
    drawerNameDrawFrom = drawerPossibleNames.GetItemsAsArray();
    y = Random(drawerPossibleNames.ItemCount - 1);
    drawnString = drawerNameDrawFrom[y];
    drawerPossibleNames.Remove(drawnString);
    
    drawnString = addFirstNameInitial(drawnString);
    drawerFamilyNames.Add(drawnString);
  }
  
  familyNamesPerDrawerNb = drawerFamilyNames.GetItemsAsArray();
  String ledgerReadText = "PAGE 1[Drawer #   Starts with[";
  int ledgerEntriesPerPage = 10;
  int page = 1;
  
  for(i = 0 ; i < 36 ; i++)
  {
    object[i].Name = String.Format("Files drawer %d (starting at %s)", (i+1), familyNamesPerDrawerNb[i]);
    object[i].SetTextProperty("TextDescription", String.Format("This is the file cabinet for client files starting at %s", familyNamesPerDrawerNb[i]));
    object[i].SetTextProperty("alternateNames", String.Format("cabinet %d, cabinet #%d, drawer %d, files %d, drawer #%d, files %d", (i+1), (i+1), (i+1), (i+1), (i+1), (i+1)));
    object[i].Visible = false;
    object[i].SetProperty("InteractableWhenInvisible", 1);
    if(ledgerEntriesPerPage == 1)
    {
      page++;
      ledgerReadText = ledgerReadText.Append(String.Format("Â¶PAGE %d[Drawer #   Starts with[", page));
      ledgerEntriesPerPage = 10;
    } else {
      ledgerEntriesPerPage--;
    }
    ledgerReadText = ledgerReadText.Append(String.Format("        %d               %s[", (i+1), familyNamesPerDrawerNb[i]));
  }
  //debugDisplay(ledgerReadText);
  iLedger.SetTextProperty("ReadDisplay", ledgerReadText);
}

function setClientNameList()
{
  possibleClientNames = Set.Create(eSorted);
  possibleClientNames.Add("Acland");
  possibleClientNames.Add("Adams");
  possibleClientNames.Add("Adamson");
  possibleClientNames.Add("Aitken");
  possibleClientNames.Add("Alderdice");
  possibleClientNames.Add("Alexander");
  possibleClientNames.Add("Amery");
  possibleClientNames.Add("Armstrong");
  possibleClientNames.Add("Asghar");
  possibleClientNames.Add("Asquith");
  possibleClientNames.Add("Astor");
  possibleClientNames.Add("Atkins");
  possibleClientNames.Add("Attlee");
  possibleClientNames.Add("Bagshaw");
  possibleClientNames.Add("Baker");
  possibleClientNames.Add("Baldwin");
  possibleClientNames.Add("Ball");
  possibleClientNames.Add("Bankes");
  possibleClientNames.Add("Baring");
  possibleClientNames.Add("Basse");
  possibleClientNames.Add("Bathurst");
  possibleClientNames.Add("Beaumont");
  possibleClientNames.Add("Beggse");
  possibleClientNames.Add("Beith");
  possibleClientNames.Add("Benn");
  possibleClientNames.Add("Benyon");
  possibleClientNames.Add("Beresford");
  possibleClientNames.Add("Bergers");
  possibleClientNames.Add("Bernal");
  possibleClientNames.Add("Bevan");
  possibleClientNames.Add("Billingham");
  possibleClientNames.Add("Bilson");
  possibleClientNames.Add("Blackburne");
  possibleClientNames.Add("Blake");
  possibleClientNames.Add("Blennerhassett");
  possibleClientNames.Add("Blomfield");
  possibleClientNames.Add("Bole");
  possibleClientNames.Add("Borwick");
  possibleClientNames.Add("Boswell");
  possibleClientNames.Add("Bottomley");
  possibleClientNames.Add("Bowater");
  possibleClientNames.Add("Bradshaw");
  possibleClientNames.Add("BrightsCash");
  possibleClientNames.Add("Bromley");
  possibleClientNames.Add("Brookes");
  possibleClientNames.Add("Brown");
  possibleClientNames.Add("Brunner");
  possibleClientNames.Add("Bull");
  possibleClientNames.Add("Burgon");
  possibleClientNames.Add("Butler");
  possibleClientNames.Add("Byers");
  possibleClientNames.Add("Calcraft");
  possibleClientNames.Add("Callaghan");
  possibleClientNames.Add("Calvert");
  possibleClientNames.Add("Carters");
  possibleClientNames.Add("Cavendish");
  possibleClientNames.Add("Cawley");
  possibleClientNames.Add("Cecil");
  possibleClientNames.Add("Chamberlain");
  possibleClientNames.Add("Chaplin");
  possibleClientNames.Add("Chapman");
  possibleClientNames.Add("Chichester");
  possibleClientNames.Add("Churchill");
  possibleClientNames.Add("Clifton");
  possibleClientNames.Add("Cooper");
  possibleClientNames.Add("Cope");
  possibleClientNames.Add("Courts");
  possibleClientNames.Add("Cox");
  possibleClientNames.Add("Cromwell");
  possibleClientNames.Add("Cryer");
  possibleClientNames.Add("Dashwood");
  possibleClientNames.Add("Davidson");
  possibleClientNames.Add("Davies");
  possibleClientNames.Add("Davis");
  possibleClientNames.Add("Dawson");
  possibleClientNames.Add("Dickinson");
  possibleClientNames.Add("Dodds");
  possibleClientNames.Add("Doran");
  possibleClientNames.Add("Drake");
  possibleClientNames.Add("Dunnes");
  possibleClientNames.Add("Dunwoody");
  possibleClientNames.Add("Durkan");
  possibleClientNames.Add("Eccles");
  possibleClientNames.Add("Edward");
  possibleClientNames.Add("Egerton");
  possibleClientNames.Add("Ewing");
  possibleClientNames.Add("Ferguson");
  possibleClientNames.Add("Fielden");
  possibleClientNames.Add("Finnie");
  possibleClientNames.Add("Foley");
  possibleClientNames.Add("Ford");
  possibleClientNames.Add("Foster");
  possibleClientNames.Add("Galbraith");
  possibleClientNames.Add("Garnier");
  possibleClientNames.Add("Gibson");
  possibleClientNames.Add("Gilmorehill");
  possibleClientNames.Add("Gladstone");
  possibleClientNames.Add("Golding");
  possibleClientNames.Add("Goldsmith");
  possibleClientNames.Add("Goschen");
  possibleClientNames.Add("Grady");
  possibleClientNames.Add("Grant");
  possibleClientNames.Add("Grattan");
  possibleClientNames.Add("Greene");
  possibleClientNames.Add("Greenwood");
  possibleClientNames.Add("Grenville");
  possibleClientNames.Add("Grey");
  possibleClientNames.Add("Grieves");
  possibleClientNames.Add("Guest");
  possibleClientNames.Add("Guinness");
  possibleClientNames.Add("Harcourt");
  possibleClientNames.Add("Hardies");
  possibleClientNames.Add("Harding");
  possibleClientNames.Add("Healy");
  possibleClientNames.Add("Heathcote");
  possibleClientNames.Add("Henderson");
  possibleClientNames.Add("Hodges");
  possibleClientNames.Add("Hodgson");
  possibleClientNames.Add("Hoggs");
  possibleClientNames.Add("Holmes");
  possibleClientNames.Add("Hooson");
  possibleClientNames.Add("Hope");
  possibleClientNames.Add("Hopkinson");
  possibleClientNames.Add("Howarth");
  possibleClientNames.Add("Howes");
  possibleClientNames.Add("Hoyle");
  possibleClientNames.Add("Hubbard");
  possibleClientNames.Add("Hurd");
  possibleClientNames.Add("Hussey");
  possibleClientNames.Add("Jackson");
  possibleClientNames.Add("Janner");
  possibleClientNames.Add("Jay");
  possibleClientNames.Add("Jeger");
  possibleClientNames.Add("Jenkins");
  possibleClientNames.Add("Johnson");
  possibleClientNames.Add("Jones");
  possibleClientNames.Add("Keen");
  possibleClientNames.Add("Kennedy");
  possibleClientNames.Add("Kinnock");
  possibleClientNames.Add("Knollys");
  possibleClientNames.Add("Lamb");
  possibleClientNames.Add("Lancaster");
  possibleClientNames.Add("Laws");
  possibleClientNames.Add("Lechmere");
  possibleClientNames.Add("Lee");
  possibleClientNames.Add("Lefroy");
  possibleClientNames.Add("Lemon");
  possibleClientNames.Add("Lever");
  possibleClientNames.Add("Lewis");
  possibleClientNames.Add("Lindsay");
  possibleClientNames.Add("Lloyd");
  possibleClientNames.Add("Long");
  possibleClientNames.Add("Lowther");
  possibleClientNames.Add("Luce");
  possibleClientNames.Add("Luttrell");
  possibleClientNames.Add("Lyon");
  possibleClientNames.Add("Maberley");
  possibleClientNames.Add("MacDonald");
  possibleClientNames.Add("MacKay");
  possibleClientNames.Add("Macmillan");
  possibleClientNames.Add("Mahon");
  possibleClientNames.Add("Mallalieus");
  possibleClientNames.Add("Mancroft");
  possibleClientNames.Add("Mandelson");
  possibleClientNames.Add("Martin");
  possibleClientNames.Add("Maude");
  possibleClientNames.Add("Maxton");
  possibleClientNames.Add("McAteer");
  possibleClientNames.Add("McAvan");
  possibleClientNames.Add("McCarthy");
  possibleClientNames.Add("McCrea");
  possibleClientNames.Add("McGuinnesse");
  possibleClientNames.Add("McMahon");
  possibleClientNames.Add("McNair-Wilson");
  possibleClientNames.Add("Meacher");
  possibleClientNames.Add("Miles");
  possibleClientNames.Add("Miliband");
  possibleClientNames.Add("Millar");
  possibleClientNames.Add("Mitchell");
  possibleClientNames.Add("Montague");
  possibleClientNames.Add("Morgan");
  possibleClientNames.Add("Morley");
  possibleClientNames.Add("Morris");
  possibleClientNames.Add("Morrison");
  possibleClientNames.Add("Mosley");
  possibleClientNames.Add("Mundell");
  possibleClientNames.Add("Nairns");
  possibleClientNames.Add("Nandy");
  possibleClientNames.Add("Norman");
  possibleClientNames.Add("Nott");
  possibleClientNames.Add("Nuttall");
  possibleClientNames.Add("O'Connell");
  possibleClientNames.Add("Ormsby");
  possibleClientNames.Add("Overend");
  possibleClientNames.Add("Paget");
  possibleClientNames.Add("Paisley");
  possibleClientNames.Add("Paton");
  possibleClientNames.Add("Pawsey");
  possibleClientNames.Add("Pease");
  possibleClientNames.Add("Peel");
  possibleClientNames.Add("Pelham");
  possibleClientNames.Add("Percival");
  possibleClientNames.Add("Perkin");
  possibleClientNames.Add("Perry");
  possibleClientNames.Add("Philipse");
  possibleClientNames.Add("Pitt");
  possibleClientNames.Add("Plunkett");
  possibleClientNames.Add("Poots");
  possibleClientNames.Add("Prentice");
  possibleClientNames.Add("Price");
  possibleClientNames.Add("Redmond");
  possibleClientNames.Add("Rees");
  possibleClientNames.Add("Ridley");
  possibleClientNames.Add("Robinson");
  possibleClientNames.Add("Roe");
  possibleClientNames.Add("Rothschild");
  possibleClientNames.Add("Ruddock");
  possibleClientNames.Add("Runciman");
  possibleClientNames.Add("Russell");
  possibleClientNames.Add("Sainsbury");
  possibleClientNames.Add("Samuel");
  possibleClientNames.Add("Samuelson");
  possibleClientNames.Add("Sandy");
  possibleClientNames.Add("Seymour");
  possibleClientNames.Add("Sharples");
  possibleClientNames.Add("Shelley");
  possibleClientNames.Add("Shinwell");
  possibleClientNames.Add("Silkin");
  possibleClientNames.Add("Sillars");
  possibleClientNames.Add("Sinclair");
  possibleClientNames.Add("Skinner");
  possibleClientNames.Add("Smith");
  possibleClientNames.Add("Spencer");
  possibleClientNames.Add("Spring");
  possibleClientNames.Add("Stanley");
  possibleClientNames.Add("Sturgeon");
  possibleClientNames.Add("Swinson");
  possibleClientNames.Add("Tennyson");
  possibleClientNames.Add("Todd");
  possibleClientNames.Add("Tyrwhitt");
  possibleClientNames.Add("Villiers");
  possibleClientNames.Add("Vivian");
  possibleClientNames.Add("Wakefield");
  possibleClientNames.Add("Walker");
  possibleClientNames.Add("Ward");
  possibleClientNames.Add("Watkin");
  possibleClientNames.Add("Watts");
  possibleClientNames.Add("Wheatley");
  possibleClientNames.Add("Wiggins");
  possibleClientNames.Add("Wigrams");
  possibleClientNames.Add("Williams");
  possibleClientNames.Add("Winterton");
  possibleClientNames.Add("Wintringham");
  possibleClientNames.Add("Wolfson");
  possibleClientNames.Add("Wood");  
}

String getClientName()
{
  int i = Random(possibleClientNames.ItemCount - 1);
  String clientNamesList[] = possibleClientNames.GetItemsAsArray();
  String clientName = clientNamesList[i];
  possibleClientNames.Remove(clientName);
  return addFirstNameInitial(clientName);
}

function room_FirstLoad()
{
  assignDrawers();
  //debugDisplay(String.Format(oDrawer1.GetTextProperty("alternateNames")));
  setClientNameList();
}

function region1_WalksOnto()
{
  player.ChangeRoom(3, 128, 112, eDirectionRight);
  player.PlaceOnWalkableArea();
}
